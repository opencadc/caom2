configurations {
    checkstyleDep
    intTestCompile.extendsFrom testCompile
    intTestRuntime.extendsFrom testRuntime
}

dependencies {
    testCompile 'com.puppycrawl.tools:checkstyle:8.2'
    checkstyleDep 'org.opencadc:cadc-quality:[1.0,2.0)'
}

sourceSets {
    intTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
        resources.srcDir file('src/intTest/resources')
	resources.srcDirs += new File(System.getenv('A') + '/test-certificates/')
    }
}

checkstyle {
    ignoreFailures = false
    config = resources.text.fromArchiveEntry(configurations.checkstyleDep, 'cadc_checkstyle.xml')
    toolVersion = '8.2'
    sourceSets = []
}

sourceSets {
    test {
        resources.srcDirs += 'src/test/resources'
    }
    intTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
        resources.srcDir file('src/intTest/resources')
        resources.srcDirs += new File(System.getenv('A') + '/test-certificates/')
    }
}

// Temporary work around for issue https://github.com/gradle/gradle/issues/881 - 
// gradle not displaying fail build status when warnings reported -->

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

tasks.withType(Test) {
    // reset the report destinations so that intTests go to their own page
    //reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.html.destination = file(reporting.baseDir.getAbsolutePath() + '/' + name)
    
    // Assign all Java system properties from
    // the command line to the tests
    systemProperties System.properties
}

task intTest(type: Test) {
    // set the configuration context
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    
    // run the tests always
    outputs.upToDateWhen { false }
}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        // "STARTED", 
    }
}

intTest {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        // "STARTED",
    }
}
